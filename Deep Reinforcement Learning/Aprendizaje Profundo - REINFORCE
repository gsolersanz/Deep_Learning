{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1kel8DdytnzfmtPYKqwflld6zni20FEfb","timestamp":1741022673684}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# Aprendizaje Profundo (2023-24)\n","## Policy Gradients: REINFORCE\n","\n","Lecturer: **Jorge Calvo Zaragoza**\n","\n","### Summary\n","In this notebook, we will:\n","  * Solve `CartPole` with REINFORCE\n","\n","Expected takeaways:\n","*  Understand the operation of REINFORCE\n","\n","\n","---\n","\n","\n"],"metadata":{"id":"3GZLM4NOxoEM"}},{"cell_type":"code","source":["# Install Gymnasium\n","!pip install gymnasium"],"metadata":{"id":"4qQnSvilsG3O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739739625052,"user_tz":-60,"elapsed":8998,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"7bf2cbd1-90f5-4d5f-94e6-55e5d0943da9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: gymnasium in /usr/local/lib/python3.11/dist-packages (1.0.0)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.11/dist-packages (from gymnasium) (1.26.4)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from gymnasium) (3.1.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.11/dist-packages (from gymnasium) (4.12.2)\n","Requirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.11/dist-packages (from gymnasium) (0.0.4)\n"]}]},{"cell_type":"markdown","metadata":{"id":"oHMzpBYHcsNN"},"source":["# CartPole environment\n","\n","During the lesson, we will work with [*CartPole*](https://gymnasium.farama.org/environments/classic_control/cart_pole/) environment, where a stick (pole) is attached by an inert joint to a cart, which moves along a horizontal axis.\n","\n","<figure>\n","<center>\n","<img src=\"https://static.packt-cdn.com/products/9781789345803/graphics/assets/9170409d-15f1-453b-816a-6f601a89fcf2.png\" width=\"500px\" align=\"center\" >\n","<figcaption>CartPole</figcaption></center>\n","</figure>\n","\n","The system is controlled by applying a force of -1 or +1 to the cart to move it left or right. The pole starts in the upright position, and the goal is to prevent it from falling.\n","\n","The state provided by the environment contains 4 values:\n","  * Cart position\n","  * Cart velocity\n","  * Pole angle\n","  * Pole angular velocity\n","\n","A reward of 1 is provided for each time step the pole remains upright.\n","\n","The episode ends if any one of the following occurs:\n","* Pole angle is greater than ±12°\n","* The center of the cart reaches the edge of the display.\n","* Episode length is greater than 500.\n","\n","\n","\n","<figure>\n","<center>\n","<img width=\"500px\" src='https://www.gymlibrary.dev/_images/cart_pole.gif' />\n","<figcaption>CartPole</figcaption></center>\n","</figure>"]},{"cell_type":"markdown","source":["## REINFORCE\n","\n","The REINFORCE algorithm is a policy gradient method that directly optimizes the policy parameters to maximize expected cumulative rewards.\n"],"metadata":{"id":"KCSbNTa4yFaS"}},{"cell_type":"markdown","source":["### Neural Network\n","\n","Let us first define the neural network. The main features are:\n","* The input has as many neurons as dimensions of the state space.\n","* The output has as many neurons as possible actions in the environment.\n","* The output should be interpretable as a *probability* of taking each action.\n","\n","The hyperparameters of the hidden layers (number of layers, filters, activations, etc.) are arbitrary, although they can influence the convergence and success of learning.\n","\n","We will also create a custom loss function, which is in turn **negated** to perform the **gradient ascent** required by the algorithm."],"metadata":{"id":"uOxRCe1KyfHG"}},{"cell_type":"code","source":["from tensorflow import keras\n","\n","def reinforce_loss(y_true, y_pred):\n","    return - keras.backend.log(y_pred) * y_true\n","\n","print(\"Loss function defined!\")\n","\n","def get_model(env):\n","    dim_states = env.observation_space.shape[0] # dim(S) = 4\n","    dim_actions = env.action_space.n # dim(A) = 2\n","\n","    model = keras.models.Sequential()\n","    model.add(keras.layers.Dense(64, activation='relu', input_dim=dim_states))\n","    model.add(keras.layers.Dense(64, activation='relu'))\n","    model.add(keras.layers.Dense(dim_actions, activation='softmax'))\n","    model.compile(loss=reinforce_loss, optimizer='adam')\n","    return model\n","\n","print(\"Model defined!\")"],"metadata":{"id":"JfLyyIcfy6Jx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739739633609,"user_tz":-60,"elapsed":8559,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"67510f7f-70f3-4a67-cbfa-ea75066d1bb7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Loss function defined!\n","Model defined!\n"]}]},{"cell_type":"markdown","source":["### Policy\n","\n","Let us define a stochastic policy, where an action is sampled based on the probability assigned by the neural network."],"metadata":{"id":"Y9lwDJni0b3q"}},{"cell_type":"code","source":["import numpy as np\n","\n","def policy(env, model, state):\n","    # h[0] => P(action=0) // h[1] => P(action=1)\n","    h = model.predict(state, verbose=0)[0]\n","\n","    # Sample action according to probabilities\n","    return np.random.choice(env.action_space.n, p=h)\n","\n","print(\"Policy defined.\")"],"metadata":{"id":"VRsJcttX0b-s","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739739633610,"user_tz":-60,"elapsed":9,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"2b8983f3-46e2-47de-f9fc-81f9947e2cc3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Policy defined.\n"]}]},{"cell_type":"markdown","source":["### Policy gradient learning\n","\n","Below is the function where the model's weights are updated based on experience, following the algorithm detailed in the theoretical session."],"metadata":{"id":"evSPRD9_1ClN"}},{"cell_type":"code","source":["# Update the model's parameters through gradient ascent\n","def policy_gradient_update(env, model, states, actions, rewards):\n","    X = np.zeros((len(rewards), env.observation_space.shape[0]),dtype='float32')\n","    a = np.zeros((len(rewards), env.action_space.n),dtype='float32')\n","\n","    discounted_rewards = np.zeros_like(rewards)\n","    G = 0\n","    for i in reversed(range(0, len(rewards))):\n","        G = G * GAMMA + rewards[i] # REINFORCE equation\n","        discounted_rewards[i] = G\n","\n","    for i in range(len(states)):\n","        X[i] = states[i]\n","        a[i][actions[i]] = discounted_rewards[i] # Only the action chosen\n","\n","    model.fit(X, a, epochs=1, batch_size=1, verbose=0)\n","\n","print(\"Policy gradient update defined.\")"],"metadata":{"id":"0ow7u9CP1sUB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739739633610,"user_tz":-60,"elapsed":7,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"bb3bb3fa-d1f9-4857-eb67-2f669df3408d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Policy gradient update defined.\n"]}]},{"cell_type":"markdown","source":["Let us define all the hyper-parameterization."],"metadata":{"id":"jioWD6YO2eHx"}},{"cell_type":"code","source":["# Selection of hyper-parameters\n","\n","GAMMA = 0.99           # Discount factor\n","EPISODES = 100         # Number of episodes\n","\n","print(\"Hyper-parameters defined.\")"],"metadata":{"id":"FUhhodCv2fyo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739739633611,"user_tz":-60,"elapsed":6,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"3d40e117-b545-4242-d441-f418e228ee0e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hyper-parameters defined.\n"]}]},{"cell_type":"markdown","source":["## Learning CartPole with REINFORCE"],"metadata":{"id":"gXgpBAPN208c"}},{"cell_type":"code","source":["import gymnasium as gym\n","from collections import deque\n","\n","env = gym.make('CartPole-v1')\n","\n","# Initialization\n","model = get_model(env)       # Learning network\n","\n","# Monitorization\n","history = []\n","mean_history = []\n","\n","# Episode's loop\n","for i in range(EPISODES):\n","    # Episode kick off\n","    state, _ = env.reset()\n","    state = np.reshape(state, [1, len(state)]) # Compatible with Keras\n","\n","    acc_reward = 0\n","\n","    # Sample a trajectory\n","    states = []\n","    actions = []\n","    rewards = []\n","\n","    # Until terminination\n","    while True:\n","        acc_reward += 1\n","\n","        # Choose action and step\n","        action = policy(env, model, state)\n","        next_state, reward, terminated, truncated, _ = env.step(action)\n","        next_state = np.reshape(next_state, [1, len(next_state)]) # Compatible with Keras\n","        done = terminated or truncated  # Termination\n","\n","        # Store trajectory\n","        states.append(state)\n","        actions.append(action)\n","        rewards.append(reward)\n","\n","        if done:\n","            # Monitoring\n","            history.append(acc_reward)\n","            mean_history.append(np.mean(history))\n","\n","            print(\"Episode: {}, Return: {}, Avg. return: {:.1f}\".format(i, acc_reward,np.mean(history)))\n","\n","            # Let's update target model\n","            policy_gradient_update(env, model, states, actions, rewards)\n","\n","            break\n","        else:\n","            state = next_state\n","\n","env.close()"],"metadata":{"id":"x3XpodlB23i0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739740193396,"user_tz":-60,"elapsed":559790,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"7bf9f7f1-6011-4ff4-a345-1a3163bdeaf3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Episode: 0, Return: 42, Avg. return: 42.0\n","Episode: 1, Return: 13, Avg. return: 27.5\n","Episode: 2, Return: 21, Avg. return: 25.3\n","Episode: 3, Return: 15, Avg. return: 22.8\n","Episode: 4, Return: 34, Avg. return: 25.0\n","Episode: 5, Return: 28, Avg. return: 25.5\n","Episode: 6, Return: 21, Avg. return: 24.9\n","Episode: 7, Return: 21, Avg. return: 24.4\n","Episode: 8, Return: 22, Avg. return: 24.1\n","Episode: 9, Return: 10, Avg. return: 22.7\n","Episode: 10, Return: 42, Avg. return: 24.5\n","Episode: 11, Return: 17, Avg. return: 23.8\n","Episode: 12, Return: 21, Avg. return: 23.6\n","Episode: 13, Return: 14, Avg. return: 22.9\n","Episode: 14, Return: 38, Avg. return: 23.9\n","Episode: 15, Return: 14, Avg. return: 23.3\n","Episode: 16, Return: 21, Avg. return: 23.2\n","Episode: 17, Return: 53, Avg. return: 24.8\n","Episode: 18, Return: 36, Avg. return: 25.4\n","Episode: 19, Return: 24, Avg. return: 25.4\n","Episode: 20, Return: 13, Avg. return: 24.8\n","Episode: 21, Return: 26, Avg. return: 24.8\n","Episode: 22, Return: 39, Avg. return: 25.4\n","Episode: 23, Return: 22, Avg. return: 25.3\n","Episode: 24, Return: 12, Avg. return: 24.8\n","Episode: 25, Return: 35, Avg. return: 25.2\n","Episode: 26, Return: 19, Avg. return: 24.9\n","Episode: 27, Return: 19, Avg. return: 24.7\n","Episode: 28, Return: 37, Avg. return: 25.1\n","Episode: 29, Return: 14, Avg. return: 24.8\n","Episode: 30, Return: 33, Avg. return: 25.0\n","Episode: 31, Return: 34, Avg. return: 25.3\n","Episode: 32, Return: 54, Avg. return: 26.2\n","Episode: 33, Return: 96, Avg. return: 28.2\n","Episode: 34, Return: 81, Avg. return: 29.7\n","Episode: 35, Return: 26, Avg. return: 29.6\n","Episode: 36, Return: 30, Avg. return: 29.6\n","Episode: 37, Return: 40, Avg. return: 29.9\n","Episode: 38, Return: 79, Avg. return: 31.2\n","Episode: 39, Return: 22, Avg. return: 30.9\n","Episode: 40, Return: 60, Avg. return: 31.7\n","Episode: 41, Return: 26, Avg. return: 31.5\n","Episode: 42, Return: 20, Avg. return: 31.3\n","Episode: 43, Return: 21, Avg. return: 31.0\n","Episode: 44, Return: 27, Avg. return: 30.9\n","Episode: 45, Return: 18, Avg. return: 30.7\n","Episode: 46, Return: 47, Avg. return: 31.0\n","Episode: 47, Return: 27, Avg. return: 30.9\n","Episode: 48, Return: 38, Avg. return: 31.1\n","Episode: 49, Return: 15, Avg. return: 30.7\n","Episode: 50, Return: 91, Avg. return: 31.9\n","Episode: 51, Return: 21, Avg. return: 31.7\n","Episode: 52, Return: 28, Avg. return: 31.6\n","Episode: 53, Return: 30, Avg. return: 31.6\n","Episode: 54, Return: 91, Avg. return: 32.7\n","Episode: 55, Return: 73, Avg. return: 33.4\n","Episode: 56, Return: 91, Avg. return: 34.4\n","Episode: 57, Return: 20, Avg. return: 34.2\n","Episode: 58, Return: 58, Avg. return: 34.6\n","Episode: 59, Return: 42, Avg. return: 34.7\n","Episode: 60, Return: 102, Avg. return: 35.8\n","Episode: 61, Return: 37, Avg. return: 35.8\n","Episode: 62, Return: 23, Avg. return: 35.6\n","Episode: 63, Return: 95, Avg. return: 36.5\n","Episode: 64, Return: 124, Avg. return: 37.9\n","Episode: 65, Return: 31, Avg. return: 37.8\n","Episode: 66, Return: 112, Avg. return: 38.9\n","Episode: 67, Return: 243, Avg. return: 41.9\n","Episode: 68, Return: 101, Avg. return: 42.8\n","Episode: 69, Return: 67, Avg. return: 43.1\n","Episode: 70, Return: 147, Avg. return: 44.6\n","Episode: 71, Return: 69, Avg. return: 44.9\n","Episode: 72, Return: 131, Avg. return: 46.1\n","Episode: 73, Return: 241, Avg. return: 48.7\n","Episode: 74, Return: 287, Avg. return: 51.9\n","Episode: 75, Return: 360, Avg. return: 55.9\n","Episode: 76, Return: 102, Avg. return: 56.5\n","Episode: 77, Return: 233, Avg. return: 58.8\n","Episode: 78, Return: 112, Avg. return: 59.5\n","Episode: 79, Return: 88, Avg. return: 59.8\n","Episode: 80, Return: 60, Avg. return: 59.8\n","Episode: 81, Return: 138, Avg. return: 60.8\n","Episode: 82, Return: 106, Avg. return: 61.3\n","Episode: 83, Return: 197, Avg. return: 63.0\n","Episode: 84, Return: 82, Avg. return: 63.2\n","Episode: 85, Return: 167, Avg. return: 64.4\n","Episode: 86, Return: 111, Avg. return: 64.9\n","Episode: 87, Return: 29, Avg. return: 64.5\n","Episode: 88, Return: 94, Avg. return: 64.8\n","Episode: 89, Return: 160, Avg. return: 65.9\n","Episode: 90, Return: 288, Avg. return: 68.3\n","Episode: 91, Return: 500, Avg. return: 73.0\n","Episode: 92, Return: 118, Avg. return: 73.5\n","Episode: 93, Return: 57, Avg. return: 73.3\n","Episode: 94, Return: 16, Avg. return: 72.7\n","Episode: 95, Return: 214, Avg. return: 74.2\n","Episode: 96, Return: 53, Avg. return: 74.0\n","Episode: 97, Return: 37, Avg. return: 73.6\n","Episode: 98, Return: 68, Avg. return: 73.6\n","Episode: 99, Return: 338, Avg. return: 76.2\n"]}]},{"cell_type":"markdown","source":["We can take a look to the evolution of the (averaged) rewards through the episodes."],"metadata":{"id":"Nh48wvPC_AXv"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Plot rewards against episode number\n","plt.plot(history)\n","plt.plot(mean_history)\n","plt.plot()\n","plt.xlabel('Episode')\n","plt.ylabel('Reward')\n","plt.show()"],"metadata":{"id":"re0mhclG_BTW","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1739740193397,"user_tz":-60,"elapsed":12,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"f6b64466-b87e-4366-e824-517c30eddc33"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Display last episode\n","\n","With the current state of the model, let us run a last episode to check performance visually."],"metadata":{"id":"WLGUbbQH20cq"}},{"cell_type":"markdown","source":["First we need some code snippet for video rendering in Colab."],"metadata":{"id":"cm9BeGrgNs3H"}},{"cell_type":"code","source":["!pip install pyvirtualdisplay > /dev/null 2>&1\n","!apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1\n","\n","import math\n","import glob\n","import io\n","import os\n","import base64\n","from IPython.display import HTML\n","from IPython import display as ipythondisplay\n","\n","# Displays the last video generated\n","def show_video(second_to_last = False):\n","  mp4list = glob.glob('video/*.mp4')\n","  mp4list.sort(key=os.path.getmtime, reverse=True)\n","  if len(mp4list) > 0:\n","    mp4 = mp4list[0 if not second_to_last else 1]\n","    video = io.open(mp4, 'r+b').read()\n","    encoded = base64.b64encode(video)\n","    print(\"Displaying {}\".format(mp4))\n","    ipythondisplay.display(HTML(data='''<video alt=\"test\" autoplay\n","                loop controls style=\"height: 400px;\">\n","                <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n","             </video>'''.format(encoded.decode('ascii'))))\n","  else:\n","    print(\"I can't find any video!\")\n","\n","print(\"show_video() defined\")"],"metadata":{"id":"eCmDHpq_bLId","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739740261468,"user_tz":-60,"elapsed":68079,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"a297aff0-d10d-41a2-ccfd-81bf9ab6efac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["show_video() defined\n"]}]},{"cell_type":"markdown","source":["Then we just run the environment with the model learned during training."],"metadata":{"id":"UPlAVaN5N0bq"}},{"cell_type":"code","source":["from gymnasium.wrappers import RecordVideo\n","env = gym.make('CartPole-v1', render_mode='rgb_array') # Render_model to record\n","env = RecordVideo(env, './video',  disable_logger=True) # Wrapper to record\n","\n","# Kick off\n","acc_reward = 0\n","state, _ = env.reset()\n","state = np.reshape(state, [1, len(state)]) # Compatible with Keras\n","\n","# Until terminination\n","while True:\n","  acc_reward += 1\n","\n","  # Choose action and step\n","  action = policy(env, model, state)\n","  next_state, reward, terminated, truncated, _ = env.step(action)\n","  next_state = np.reshape(next_state, [1, len(next_state)]) # Compatible with Keras\n","  done = terminated or truncated  # Termination\n","\n","  if done:\n","      print(\"Return: {}\".format(acc_reward))\n","      break\n","  else:\n","      state = next_state\n","\n","env.close()\n","\n","# Display last episode\n","show_video()\n"],"metadata":{"id":"z1ekPxFJoQ7h","colab":{"base_uri":"https://localhost:8080/","height":457},"executionInfo":{"status":"ok","timestamp":1739740261468,"user_tz":-60,"elapsed":8,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"11a00f54-277c-445d-ac76-c69ecc88737e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Return: 150\n","Displaying video/rl-video-episode-0.mp4\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<video alt=\"test\" autoplay\n","                loop controls style=\"height: 400px;\">\n","                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n","             </video>"]},"metadata":{}}]}]}