{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1QbceZx-225oyN8ghHF5xCzkbeCvJL3sD","timestamp":1741022668595}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# Aprendizaje Profundo (2024-25)\n","## Deep Q Networks (DQN)\n","\n","Lecturer: **Jorge Calvo Zaragoza**\n","\n","### Summary\n","In this notebook, we will:\n","  * Solve `CartPole` with DQN\n","\n","Expected takeaways:\n","*  Understand the operation of DQN\n","\n","\n","---\n","\n","\n"],"metadata":{"id":"3GZLM4NOxoEM"}},{"cell_type":"code","source":["# Install Gymnasium\n","!pip install gymnasium"],"metadata":{"id":"4qQnSvilsG3O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739734965022,"user_tz":-60,"elapsed":5224,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"b8a1221a-fae2-4caf-d3af-ed8dff6991b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: gymnasium in /usr/local/lib/python3.11/dist-packages (1.0.0)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.11/dist-packages (from gymnasium) (1.26.4)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from gymnasium) (3.1.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.11/dist-packages (from gymnasium) (4.12.2)\n","Requirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.11/dist-packages (from gymnasium) (0.0.4)\n"]}]},{"cell_type":"markdown","metadata":{"id":"oHMzpBYHcsNN"},"source":["# CartPole environment\n","\n","During the lesson, we will work with [*CartPole*](https://gymnasium.farama.org/environments/classic_control/cart_pole/) environment, where a stick (pole) is attached by an inert joint to a cart, which moves along a horizontal axis.\n","\n","<figure>\n","<center>\n","<img src=\"https://static.packt-cdn.com/products/9781789345803/graphics/assets/9170409d-15f1-453b-816a-6f601a89fcf2.png\" width=\"500px\" align=\"center\" >\n","<figcaption>CartPole</figcaption></center>\n","</figure>\n","\n","The system is controlled by applying a force of -1 or +1 to the cart to move it left or right. The pole starts in the upright position, and the goal is to prevent it from falling.\n","\n","The state provided by the environment contains 4 values:\n","  * Cart position\n","  * Cart velocity\n","  * Pole angle\n","  * Pole angular velocity\n","\n","A reward of 1 is provided for each time step the pole remains upright.\n","\n","The episode ends if any one of the following occurs:\n","* Pole angle is greater than ±12°\n","* The center of the cart reaches the edge of the display.\n","* Episode length is greater than 500.\n","\n","\n","\n","<figure>\n","<center>\n","<img width=\"500px\" src='https://www.gymlibrary.dev/_images/cart_pole.gif' />\n","<figcaption>CartPole</figcaption></center>\n","</figure>"]},{"cell_type":"markdown","source":["## DQN\n","\n","DQN combines deep learning techniques with Q-learning, a classic reinforcement learning method. It uses a neural network to approximate the Q-function, which represents the value of taking an action in a given state.\n"],"metadata":{"id":"KCSbNTa4yFaS"}},{"cell_type":"markdown","source":["### Neural Network\n","\n","Let us first define the neural network. The main features are:\n","* The input has as many neurons as dimenions of the state space.\n","* The output has as many neurons as possible actions in the environment.\n","* We are predicting **values** so the activation should not be constrained.\n","* The loss is the Mean Squared Error.\n","\n","The hyperparameters of the neural network (number of layers, filters, activations, etc.) are arbitrary, although they can influence the convergence and success of learning."],"metadata":{"id":"uOxRCe1KyfHG"}},{"cell_type":"code","source":["from tensorflow import keras\n","\n","def get_model(env):\n","    dim_states = env.observation_space.shape[0] # dim(S) = 4\n","    dim_actions = env.action_space.n # dim(A) = 2\n","\n","    model = keras.models.Sequential()\n","    model.add(keras.layers.Dense(32, input_dim=dim_states, activation='relu'))\n","    model.add(keras.layers.Dense(32, activation='relu'))\n","    model.add(keras.layers.Dense(2, activation='linear'))\n","    model.compile(loss='mse', optimizer='adam')\n","\n","    return model\n","\n","print(\"Model defined!\")"],"metadata":{"id":"JfLyyIcfy6Jx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739734975567,"user_tz":-60,"elapsed":10550,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"a02226a9-4aa4-4a9c-c05b-87ccf8ca242f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model defined!\n"]}]},{"cell_type":"markdown","source":["### Policy\n","\n","Let us define an $\\epsilon$-greedy policy. We'll draw a random number, and if it doesn't exceed the value of $\\epsilon$, we'll take a random action. Otherwise, we'll choose the action with the highest activation according to the DQN."],"metadata":{"id":"Y9lwDJni0b3q"}},{"cell_type":"code","source":["import numpy as np\n","\n","def policy(env, model, state, epsilon):\n","    if np.random.rand() <= epsilon:\n","        return env.action_space.sample()    # Random action\n","    else:\n","      state = np.reshape(state, [1, len(state)])  # state to tensor\n","      action_activations = model.predict(state, verbose = 0) # Q[state]\n","      return np.argmax(action_activations[0])     # Take greedy action\n","\n","print(\"Policy defined.\")"],"metadata":{"id":"VRsJcttX0b-s","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739734975568,"user_tz":-60,"elapsed":8,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"b063ecdb-960f-484f-c936-4dc08adfb404"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Policy defined.\n"]}]},{"cell_type":"markdown","source":["### Experience Replay\n","\n","DQN is used together with the *Experience Replay* mechanism, where the estimation of values for state-action pairs is not performed on recent experiences but by sampling a memory with a number (finite) of past experiences.\n","\n","Remember that to avoid pursuing a non-stationary target, two networks are used: the one that learns and the one that calculates the target."],"metadata":{"id":"evSPRD9_1ClN"}},{"cell_type":"code","source":["import random\n","\n","def experience_replay(m_learning, m_target, memory, batch_size, gamma):\n","  # Sample a batch from past experience (memory)\n","  minibatch = [random.choice(memory) for _ in range(batch_size)]\n","\n","  states = np.array([sample[0] for sample in minibatch])\n","  actions = np.array([sample[1] for sample in minibatch])\n","  rewards = np.array([sample[2] for sample in minibatch])\n","  next_states = np.array([sample[3] for sample in minibatch])\n","  dones = np.array([sample[4] for sample in minibatch])\n","\n","  targets = m_learning.predict(states, verbose = 0)\n","  next_state_targets = m_target.predict(next_states, verbose = 0)\n","\n","  # Compute DQN target values\n","  for i in range(batch_size):\n","      target = rewards[i]\n","      if not dones[i]:\n","          target = rewards[i] + gamma * np.max(next_state_targets[i])\n","      targets[i][actions[i]] = target\n","\n","  m_learning.fit(states, targets, epochs=1, batch_size=1,verbose=0)\n","\n","print(\"Experience Replay defined.\")"],"metadata":{"id":"0ow7u9CP1sUB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739734975568,"user_tz":-60,"elapsed":7,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"95c3b509-2b76-4a07-ddd1-86a0c4613c02"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Experience Replay defined.\n"]}]},{"cell_type":"markdown","source":["Let us define all the hyper-parameterization."],"metadata":{"id":"jioWD6YO2eHx"}},{"cell_type":"code","source":["# Selection of hyper-parameters\n","\n","GAMMA = 0.95           # Discount factor\n","EPISODES = 200         # Number of episodes\n","HISTORY_SIZE = 2000    # Memory size of our Experience Replay\n","BATCH_SIZE = 16        # Batch size for Experience Replay\n","EPSILON_INIT = 1.0     # initial epsilon\n","EPSILON_DECAY = 0.985  # delta (epsilon decay)\n","\n","print(\"Hyper-parameters defined.\")"],"metadata":{"id":"FUhhodCv2fyo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739734975568,"user_tz":-60,"elapsed":6,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"3a75b08e-1525-482e-df93-df3d16a976db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hyper-parameters defined.\n"]}]},{"cell_type":"markdown","source":["## Learning CartPole with DQN"],"metadata":{"id":"gXgpBAPN208c"}},{"cell_type":"code","source":["import gymnasium as gym\n","from collections import deque\n","\n","env = gym.make('CartPole-v1')\n","\n","# Initialization\n","model_learning = get_model(env)       # Learning network\n","model_target = get_model(env)         # Target network\n","\n","memory = deque(maxlen=HISTORY_SIZE)   # Memory for Experience Replay\n","epsilon = EPSILON_INIT                # Epsilon for episode\n","\n","# Monitorization\n","rewards = []\n","mean_rewards = []\n","\n","# Episode's loop\n","for i in range(EPISODES):\n","    state, _ = env.reset()\n","    acc_reward = 0\n","\n","    # Until terminination\n","    while True:\n","        acc_reward += 1\n","\n","        # Choose action and step\n","        action = policy(env,model_learning, state, epsilon)\n","        next_state, reward, terminated, truncated, _ = env.step(action)\n","        done = terminated or truncated\n","\n","        reward = reward if not done else -10  # Makes termination less rewarding\n","\n","        # Store experience\n","        memory.append([state, action, reward, next_state, done])\n","\n","        # Learn !\n","        experience_replay(model_learning, model_target, memory, BATCH_SIZE, GAMMA)\n","\n","        if done:\n","            print(\"Episode: {}, Return: {}, Avg. return: {:.1f}, Replay buffer: {}, epsilon: {:.3f}\".format(i, acc_reward,np.mean(rewards),len(memory),epsilon))\n","\n","            # Monitoring\n","            rewards.append(acc_reward)\n","            mean_rewards.append(np.mean(rewards))\n","\n","            # Let's update target model\n","            model_target.set_weights(model_learning.get_weights())\n","\n","            break\n","        else:\n","            state = next_state\n","\n","    epsilon *= EPSILON_DECAY\n","\n","env.close()"],"metadata":{"id":"x3XpodlB23i0","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1739739518306,"user_tz":-60,"elapsed":4542742,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"cc515907-40df-4b73-e76e-25fde2b7e2ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","/usr/local/lib/python3.11/dist-packages/numpy/core/fromnumeric.py:3504: RuntimeWarning: Mean of empty slice.\n","  return _methods._mean(a, axis=axis, dtype=dtype,\n","/usr/local/lib/python3.11/dist-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide\n","  ret = ret.dtype.type(ret / rcount)\n"]},{"output_type":"stream","name":"stdout","text":["Episode: 0, Return: 12, Avg. return: nan, Replay buffer: 12, epsilon: 1.000\n","Episode: 1, Return: 18, Avg. return: 12.0, Replay buffer: 30, epsilon: 0.985\n","Episode: 2, Return: 16, Avg. return: 15.0, Replay buffer: 46, epsilon: 0.970\n","Episode: 3, Return: 14, Avg. return: 15.3, Replay buffer: 60, epsilon: 0.956\n","Episode: 4, Return: 26, Avg. return: 15.0, Replay buffer: 86, epsilon: 0.941\n","Episode: 5, Return: 13, Avg. return: 17.2, Replay buffer: 99, epsilon: 0.927\n","Episode: 6, Return: 66, Avg. return: 16.5, Replay buffer: 165, epsilon: 0.913\n","Episode: 7, Return: 20, Avg. return: 23.6, Replay buffer: 185, epsilon: 0.900\n","Episode: 8, Return: 34, Avg. return: 23.1, Replay buffer: 219, epsilon: 0.886\n","Episode: 9, Return: 38, Avg. return: 24.3, Replay buffer: 257, epsilon: 0.873\n","Episode: 10, Return: 10, Avg. return: 25.7, Replay buffer: 267, epsilon: 0.860\n","Episode: 11, Return: 18, Avg. return: 24.3, Replay buffer: 285, epsilon: 0.847\n","Episode: 12, Return: 15, Avg. return: 23.8, Replay buffer: 300, epsilon: 0.834\n","Episode: 13, Return: 24, Avg. return: 23.1, Replay buffer: 324, epsilon: 0.822\n","Episode: 14, Return: 72, Avg. return: 23.1, Replay buffer: 396, epsilon: 0.809\n","Episode: 15, Return: 86, Avg. return: 26.4, Replay buffer: 482, epsilon: 0.797\n","Episode: 16, Return: 42, Avg. return: 30.1, Replay buffer: 524, epsilon: 0.785\n","Episode: 17, Return: 11, Avg. return: 30.8, Replay buffer: 535, epsilon: 0.773\n","Episode: 18, Return: 20, Avg. return: 29.7, Replay buffer: 555, epsilon: 0.762\n","Episode: 19, Return: 79, Avg. return: 29.2, Replay buffer: 634, epsilon: 0.750\n","Episode: 20, Return: 29, Avg. return: 31.7, Replay buffer: 663, epsilon: 0.739\n","Episode: 21, Return: 52, Avg. return: 31.6, Replay buffer: 715, epsilon: 0.728\n","Episode: 22, Return: 30, Avg. return: 32.5, Replay buffer: 745, epsilon: 0.717\n","Episode: 23, Return: 17, Avg. return: 32.4, Replay buffer: 762, epsilon: 0.706\n","Episode: 24, Return: 63, Avg. return: 31.8, Replay buffer: 825, epsilon: 0.696\n","Episode: 25, Return: 74, Avg. return: 33.0, Replay buffer: 899, epsilon: 0.685\n","Episode: 26, Return: 127, Avg. return: 34.6, Replay buffer: 1026, epsilon: 0.675\n","Episode: 27, Return: 75, Avg. return: 38.0, Replay buffer: 1101, epsilon: 0.665\n","Episode: 28, Return: 14, Avg. return: 39.3, Replay buffer: 1115, epsilon: 0.655\n","Episode: 29, Return: 160, Avg. return: 38.4, Replay buffer: 1275, epsilon: 0.645\n","Episode: 30, Return: 58, Avg. return: 42.5, Replay buffer: 1333, epsilon: 0.635\n","Episode: 31, Return: 61, Avg. return: 43.0, Replay buffer: 1394, epsilon: 0.626\n","Episode: 32, Return: 41, Avg. return: 43.6, Replay buffer: 1435, epsilon: 0.617\n","Episode: 33, Return: 160, Avg. return: 43.5, Replay buffer: 1595, epsilon: 0.607\n","Episode: 34, Return: 18, Avg. return: 46.9, Replay buffer: 1613, epsilon: 0.598\n","Episode: 35, Return: 133, Avg. return: 46.1, Replay buffer: 1746, epsilon: 0.589\n","Episode: 36, Return: 72, Avg. return: 48.5, Replay buffer: 1818, epsilon: 0.580\n","Episode: 37, Return: 99, Avg. return: 49.1, Replay buffer: 1917, epsilon: 0.572\n","Episode: 38, Return: 118, Avg. return: 50.4, Replay buffer: 2000, epsilon: 0.563\n","Episode: 39, Return: 247, Avg. return: 52.2, Replay buffer: 2000, epsilon: 0.555\n","Episode: 40, Return: 119, Avg. return: 57.0, Replay buffer: 2000, epsilon: 0.546\n","Episode: 41, Return: 172, Avg. return: 58.6, Replay buffer: 2000, epsilon: 0.538\n","Episode: 42, Return: 24, Avg. return: 61.3, Replay buffer: 2000, epsilon: 0.530\n","Episode: 43, Return: 44, Avg. return: 60.4, Replay buffer: 2000, epsilon: 0.522\n","Episode: 44, Return: 203, Avg. return: 60.0, Replay buffer: 2000, epsilon: 0.514\n","Episode: 45, Return: 194, Avg. return: 63.2, Replay buffer: 2000, epsilon: 0.507\n","Episode: 46, Return: 29, Avg. return: 66.0, Replay buffer: 2000, epsilon: 0.499\n","Episode: 47, Return: 188, Avg. return: 65.3, Replay buffer: 2000, epsilon: 0.491\n","Episode: 48, Return: 99, Avg. return: 67.8, Replay buffer: 2000, epsilon: 0.484\n","Episode: 49, Return: 71, Avg. return: 68.4, Replay buffer: 2000, epsilon: 0.477\n","Episode: 50, Return: 27, Avg. return: 68.5, Replay buffer: 2000, epsilon: 0.470\n","Episode: 51, Return: 178, Avg. return: 67.7, Replay buffer: 2000, epsilon: 0.463\n","Episode: 52, Return: 118, Avg. return: 69.8, Replay buffer: 2000, epsilon: 0.456\n","Episode: 53, Return: 44, Avg. return: 70.7, Replay buffer: 2000, epsilon: 0.449\n","Episode: 54, Return: 263, Avg. return: 70.2, Replay buffer: 2000, epsilon: 0.442\n","Episode: 55, Return: 176, Avg. return: 73.7, Replay buffer: 2000, epsilon: 0.436\n","Episode: 56, Return: 137, Avg. return: 75.6, Replay buffer: 2000, epsilon: 0.429\n","Episode: 57, Return: 309, Avg. return: 76.6, Replay buffer: 2000, epsilon: 0.423\n","Episode: 58, Return: 211, Avg. return: 80.6, Replay buffer: 2000, epsilon: 0.416\n","Episode: 59, Return: 241, Avg. return: 82.8, Replay buffer: 2000, epsilon: 0.410\n","Episode: 60, Return: 329, Avg. return: 85.5, Replay buffer: 2000, epsilon: 0.404\n","Episode: 61, Return: 62, Avg. return: 89.5, Replay buffer: 2000, epsilon: 0.398\n","Episode: 62, Return: 85, Avg. return: 89.0, Replay buffer: 2000, epsilon: 0.392\n","Episode: 63, Return: 184, Avg. return: 89.0, Replay buffer: 2000, epsilon: 0.386\n","Episode: 64, Return: 235, Avg. return: 90.5, Replay buffer: 2000, epsilon: 0.380\n","Episode: 65, Return: 148, Avg. return: 92.7, Replay buffer: 2000, epsilon: 0.374\n","Episode: 66, Return: 109, Avg. return: 93.5, Replay buffer: 2000, epsilon: 0.369\n","Episode: 67, Return: 252, Avg. return: 93.7, Replay buffer: 2000, epsilon: 0.363\n","Episode: 68, Return: 191, Avg. return: 96.1, Replay buffer: 2000, epsilon: 0.358\n","Episode: 69, Return: 51, Avg. return: 97.4, Replay buffer: 2000, epsilon: 0.352\n","Episode: 70, Return: 275, Avg. return: 96.8, Replay buffer: 2000, epsilon: 0.347\n","Episode: 71, Return: 452, Avg. return: 99.3, Replay buffer: 2000, epsilon: 0.342\n","Episode: 72, Return: 18, Avg. return: 104.2, Replay buffer: 2000, epsilon: 0.337\n","Episode: 73, Return: 298, Avg. return: 103.0, Replay buffer: 2000, epsilon: 0.332\n","Episode: 74, Return: 195, Avg. return: 105.6, Replay buffer: 2000, epsilon: 0.327\n","Episode: 75, Return: 147, Avg. return: 106.8, Replay buffer: 2000, epsilon: 0.322\n","Episode: 76, Return: 191, Avg. return: 107.4, Replay buffer: 2000, epsilon: 0.317\n","Episode: 77, Return: 167, Avg. return: 108.5, Replay buffer: 2000, epsilon: 0.312\n","Episode: 78, Return: 140, Avg. return: 109.2, Replay buffer: 2000, epsilon: 0.308\n","Episode: 79, Return: 164, Avg. return: 109.6, Replay buffer: 2000, epsilon: 0.303\n","Episode: 80, Return: 133, Avg. return: 110.3, Replay buffer: 2000, epsilon: 0.298\n","Episode: 81, Return: 118, Avg. return: 110.6, Replay buffer: 2000, epsilon: 0.294\n","Episode: 82, Return: 128, Avg. return: 110.6, Replay buffer: 2000, epsilon: 0.290\n","Episode: 83, Return: 171, Avg. return: 110.9, Replay buffer: 2000, epsilon: 0.285\n","Episode: 84, Return: 25, Avg. return: 111.6, Replay buffer: 2000, epsilon: 0.281\n","Episode: 85, Return: 54, Avg. return: 110.6, Replay buffer: 2000, epsilon: 0.277\n","Episode: 86, Return: 154, Avg. return: 109.9, Replay buffer: 2000, epsilon: 0.273\n","Episode: 87, Return: 120, Avg. return: 110.4, Replay buffer: 2000, epsilon: 0.269\n","Episode: 88, Return: 22, Avg. return: 110.5, Replay buffer: 2000, epsilon: 0.264\n","Episode: 89, Return: 125, Avg. return: 109.5, Replay buffer: 2000, epsilon: 0.261\n","Episode: 90, Return: 14, Avg. return: 109.7, Replay buffer: 2000, epsilon: 0.257\n","Episode: 91, Return: 14, Avg. return: 108.6, Replay buffer: 2000, epsilon: 0.253\n","Episode: 92, Return: 123, Avg. return: 107.6, Replay buffer: 2000, epsilon: 0.249\n","Episode: 93, Return: 149, Avg. return: 107.8, Replay buffer: 2000, epsilon: 0.245\n","Episode: 94, Return: 12, Avg. return: 108.2, Replay buffer: 2000, epsilon: 0.242\n","Episode: 95, Return: 134, Avg. return: 107.2, Replay buffer: 2000, epsilon: 0.238\n","Episode: 96, Return: 156, Avg. return: 107.5, Replay buffer: 2000, epsilon: 0.234\n","Episode: 97, Return: 175, Avg. return: 108.0, Replay buffer: 2000, epsilon: 0.231\n","Episode: 98, Return: 200, Avg. return: 108.7, Replay buffer: 2000, epsilon: 0.227\n","Episode: 99, Return: 156, Avg. return: 109.6, Replay buffer: 2000, epsilon: 0.224\n","Episode: 100, Return: 203, Avg. return: 110.0, Replay buffer: 2000, epsilon: 0.221\n","Episode: 101, Return: 162, Avg. return: 111.0, Replay buffer: 2000, epsilon: 0.217\n","Episode: 102, Return: 190, Avg. return: 111.5, Replay buffer: 2000, epsilon: 0.214\n","Episode: 103, Return: 150, Avg. return: 112.2, Replay buffer: 2000, epsilon: 0.211\n","Episode: 104, Return: 112, Avg. return: 112.6, Replay buffer: 2000, epsilon: 0.208\n","Episode: 105, Return: 117, Avg. return: 112.6, Replay buffer: 2000, epsilon: 0.205\n","Episode: 106, Return: 10, Avg. return: 112.6, Replay buffer: 2000, epsilon: 0.201\n","Episode: 107, Return: 28, Avg. return: 111.7, Replay buffer: 2000, epsilon: 0.198\n","Episode: 108, Return: 125, Avg. return: 110.9, Replay buffer: 2000, epsilon: 0.195\n","Episode: 109, Return: 121, Avg. return: 111.0, Replay buffer: 2000, epsilon: 0.193\n","Episode: 110, Return: 116, Avg. return: 111.1, Replay buffer: 2000, epsilon: 0.190\n","Episode: 111, Return: 116, Avg. return: 111.2, Replay buffer: 2000, epsilon: 0.187\n","Episode: 112, Return: 123, Avg. return: 111.2, Replay buffer: 2000, epsilon: 0.184\n","Episode: 113, Return: 119, Avg. return: 111.3, Replay buffer: 2000, epsilon: 0.181\n","Episode: 114, Return: 153, Avg. return: 111.4, Replay buffer: 2000, epsilon: 0.179\n","Episode: 115, Return: 144, Avg. return: 111.7, Replay buffer: 2000, epsilon: 0.176\n","Episode: 116, Return: 137, Avg. return: 112.0, Replay buffer: 2000, epsilon: 0.173\n","Episode: 117, Return: 100, Avg. return: 112.2, Replay buffer: 2000, epsilon: 0.171\n","Episode: 118, Return: 115, Avg. return: 112.1, Replay buffer: 2000, epsilon: 0.168\n","Episode: 119, Return: 116, Avg. return: 112.2, Replay buffer: 2000, epsilon: 0.166\n","Episode: 120, Return: 115, Avg. return: 112.2, Replay buffer: 2000, epsilon: 0.163\n","Episode: 121, Return: 26, Avg. return: 112.2, Replay buffer: 2000, epsilon: 0.161\n","Episode: 122, Return: 101, Avg. return: 111.5, Replay buffer: 2000, epsilon: 0.158\n","Episode: 123, Return: 63, Avg. return: 111.4, Replay buffer: 2000, epsilon: 0.156\n","Episode: 124, Return: 132, Avg. return: 111.0, Replay buffer: 2000, epsilon: 0.153\n","Episode: 125, Return: 130, Avg. return: 111.2, Replay buffer: 2000, epsilon: 0.151\n","Episode: 126, Return: 132, Avg. return: 111.3, Replay buffer: 2000, epsilon: 0.149\n","Episode: 127, Return: 113, Avg. return: 111.5, Replay buffer: 2000, epsilon: 0.147\n","Episode: 128, Return: 13, Avg. return: 111.5, Replay buffer: 2000, epsilon: 0.144\n","Episode: 129, Return: 118, Avg. return: 110.8, Replay buffer: 2000, epsilon: 0.142\n","Episode: 130, Return: 11, Avg. return: 110.8, Replay buffer: 2000, epsilon: 0.140\n","Episode: 131, Return: 13, Avg. return: 110.0, Replay buffer: 2000, epsilon: 0.138\n","Episode: 132, Return: 53, Avg. return: 109.3, Replay buffer: 2000, epsilon: 0.136\n","Episode: 133, Return: 18, Avg. return: 108.9, Replay buffer: 2000, epsilon: 0.134\n","Episode: 134, Return: 15, Avg. return: 108.2, Replay buffer: 2000, epsilon: 0.132\n","Episode: 135, Return: 31, Avg. return: 107.5, Replay buffer: 2000, epsilon: 0.130\n","Episode: 136, Return: 150, Avg. return: 107.0, Replay buffer: 2000, epsilon: 0.128\n","Episode: 137, Return: 143, Avg. return: 107.3, Replay buffer: 2000, epsilon: 0.126\n","Episode: 138, Return: 133, Avg. return: 107.5, Replay buffer: 2000, epsilon: 0.124\n","Episode: 139, Return: 152, Avg. return: 107.7, Replay buffer: 2000, epsilon: 0.122\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-37a445e3148b>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0;31m# Learn !\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m         \u001b[0mexperience_replay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_learning\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_target\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmemory\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBATCH_SIZE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mGAMMA\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-80f31187ff28>\u001b[0m in \u001b[0;36mexperience_replay\u001b[0;34m(m_learning, m_target, memory, batch_size, gamma)\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m   \u001b[0mtargets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mm_learning\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstates\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m   \u001b[0mnext_state_targets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mm_target\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnext_states\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m   \u001b[0;31m# Compute DQN target values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps, callbacks)\u001b[0m\n\u001b[1;32m    557\u001b[0m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    558\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mepoch_iterator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcatch_stop_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 559\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mepoch_iterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    560\u001b[0m                 \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_predict_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    561\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    734\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    735\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 736\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_epoch_iterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    738\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mcontextlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontextmanager\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/trainers/epoch_iterator.py\u001b[0m in \u001b[0;36m_enumerate_iterator\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    100\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0msteps_per_epoch\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_current_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msteps_per_epoch\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_current_iterator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_steps_seen\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mstep\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msteps_per_execution\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/dataset_ops.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    499\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minside_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    500\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolocate_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variant_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 501\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0miterator_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOwnedIterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    502\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m       raise RuntimeError(\"`tf.data.Dataset` only supports Python-style \"\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, dataset, components, element_spec)\u001b[0m\n\u001b[1;32m    707\u001b[0m             \u001b[0;34m\"When `dataset` is provided, `element_spec` and `components` must \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    708\u001b[0m             \"not be specified.\")\n\u001b[0;32m--> 709\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    710\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    711\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_next_call_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m_create_iterator\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    746\u001b[0m             self._flat_output_types)\n\u001b[1;32m    747\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterator_resource\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_set_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfulltype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 748\u001b[0;31m       \u001b[0mgen_dataset_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mds_variant\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterator_resource\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    749\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    750\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__iter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/ops/gen_dataset_ops.py\u001b[0m in \u001b[0;36mmake_iterator\u001b[0;34m(dataset, iterator, name)\u001b[0m\n\u001b[1;32m   3476\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mtld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_eager\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3477\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3478\u001b[0;31m       _result = pywrap_tfe.TFE_Py_FastPathExecute(\n\u001b[0m\u001b[1;32m   3479\u001b[0m         _ctx, \"MakeIterator\", name, dataset, iterator)\n\u001b[1;32m   3480\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["We can take a look to the evolution of the (averaged) rewards through the episodes."],"metadata":{"id":"Nh48wvPC_AXv"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Plot rewards against episode number\n","plt.plot(rewards)\n","plt.plot(mean_rewards)\n","plt.plot()\n","plt.xlabel('Episode')\n","plt.ylabel('Reward')\n","plt.show()"],"metadata":{"id":"re0mhclG_BTW","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1739739522514,"user_tz":-60,"elapsed":568,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"d13a5dc5-8ff7-4dba-fd20-f5dcc59c87e4"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Display last episode\n","\n","With the current state of the model, let us run a last episode to check performance visually."],"metadata":{"id":"WLGUbbQH20cq"}},{"cell_type":"markdown","source":["First we need some code snippet for video rendering in Colab."],"metadata":{"id":"cm9BeGrgNs3H"}},{"cell_type":"code","source":["!pip install pyvirtualdisplay > /dev/null 2>&1\n","!apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1\n","\n","import math\n","import glob\n","import io\n","import os\n","import base64\n","from IPython.display import HTML\n","from IPython import display as ipythondisplay\n","\n","# Displays the last video generated\n","def show_video(second_to_last = False):\n","  mp4list = glob.glob('video/*.mp4')\n","  mp4list.sort(key=os.path.getmtime, reverse=True)\n","  if len(mp4list) > 0:\n","    mp4 = mp4list[0 if not second_to_last else 1]\n","    video = io.open(mp4, 'r+b').read()\n","    encoded = base64.b64encode(video)\n","    print(\"Displaying {}\".format(mp4))\n","    ipythondisplay.display(HTML(data='''<video alt=\"test\" autoplay\n","                loop controls style=\"height: 400px;\">\n","                <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n","             </video>'''.format(encoded.decode('ascii'))))\n","  else:\n","    print(\"I can't find any video!\")\n","\n","print(\"show_video() defined\")"],"metadata":{"id":"eCmDHpq_bLId","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739739533036,"user_tz":-60,"elapsed":4663,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"d3bb70e4-f01a-4c63-f335-45aa245ed0c3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["show_video() defined\n"]}]},{"cell_type":"markdown","source":["Then we just run the environment with a completely greedy approach using the model learning during training."],"metadata":{"id":"UPlAVaN5N0bq"}},{"cell_type":"code","source":["from gymnasium.wrappers import RecordVideo\n","\n","env = gym.make('CartPole-v1', render_mode='rgb_array') # Render_model to record\n","env = RecordVideo(env, './video',  disable_logger=True) # Wrapper to record\n","\n","acc_reward = 0\n","state, _ = env.reset()\n","\n","# Until terminination\n","while True:\n","    acc_reward += 1\n","\n","    action = policy(env,model_learning, state, 0) # Greedy policy!\n","    next_state, reward, terminated, truncated, _ = env.step(action)\n","    done = terminated or truncated\n","\n","    if done:\n","        print(\"Return: {}, epsilon: {:.3f}\".format(acc_reward,epsilon))\n","        break\n","    else:\n","        state = next_state\n","\n","env.close()\n","\n","# Display last episode\n","show_video()"],"metadata":{"id":"z1ekPxFJoQ7h","colab":{"base_uri":"https://localhost:8080/","height":512},"executionInfo":{"status":"ok","timestamp":1739739578424,"user_tz":-60,"elapsed":10034,"user":{"displayName":"Jorge Calvo Zaragoza","userId":"15951505495737356260"}},"outputId":"ddea034a-5872-4408-c8ee-420fb9913a11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/gymnasium/wrappers/rendering.py:283: UserWarning: \u001b[33mWARN: Overwriting existing videos at /content/video folder (try specifying a different `video_folder` for the `RecordVideo` wrapper if this is not desired)\u001b[0m\n","  logger.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Return: 130, epsilon: 0.121\n","Displaying video/rl-video-episode-0.mp4\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<video alt=\"test\" autoplay\n","                loop controls style=\"height: 400px;\">\n","                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n","             </video>"]},"metadata":{}}]}]}